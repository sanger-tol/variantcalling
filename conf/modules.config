/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info/variantcalling" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    if( params.align ) {

        withName: '.*:ALIGN_PACBIO:FILTER_PACBIO:SAMTOOLS_CONVERT' {
            ext.args = "-e '[rq]>=0.99' -x fi -x fp -x ri -x rp --write-index --output-fmt bam"
        }

        withName: '.*:ALIGN_PACBIO:FILTER_PACBIO:SAMTOOLS_COLLATE' {
            ext.prefix = { "${meta.id}.collate" }
        }

        withName: '.*:ALIGN_PACBIO:FILTER_PACBIO:BLAST_BLASTN' {
            ext.args = '-task blastn -reward 1 -penalty -5 -gapopen 3 -gapextend 3 -dust yes -soft_masking true -evalue .01 -searchsp 1750000000000 -outfmt 6'
        }

        withName: '.*:ALIGN_PACBIO:FILTER_PACBIO:SAMTOOLS_FILTER' {
            ext.prefix = { "${meta.id}.filter" }
        }

        withName: '.*:ALIGN_PACBIO:FILTER_PACBIO:SAMTOOLS_FASTQ' {
            ext.args = '-F 0x200 -nt'
        }

        withName: '.*:.*:ALIGN_PACBIO:MINIMAP2_ALIGN' {
            ext.args = { "-ax map-hifi --cs=short -R ${meta.read_group} -I" + Math.ceil(meta2.genome_size/1e9) + 'G' }
        }

        withName: '.*:.*:ALIGN_PACBIO:SAMTOOLS_MERGE' {
            ext.args = { "-c -p" }
            ext.prefix = { "${meta.id}.merge" }
        }

        withName: '.*:CONVERT_STATS:SAMTOOLS_VIEW' {
            ext.prefix = { "${meta2.id}.${meta.datatype}.${meta.id}" }
            ext.args   = '--output-fmt cram --write-index'
        }

        withName: '.*:CONVERT_STATS:SAMTOOLS_STATS' {
            ext.prefix = { "${input.baseName}" }
        }

        withName: '.*:CONVERT_STATS:SAMTOOLS_FLAGSTAT' {
            ext.prefix = { "${bam.baseName}" }
        }

        withName: '.*:CONVERT_STATS:SAMTOOLS_IDXSTATS' {
            ext.prefix = { "${bam.baseName}" }
        }

        withName: '.*:ALIGN_PACBIO:CONVERT_STATS:.*' {
            publishDir = [
                path: { "${params.outdir}/variant_calling" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    } else{

        withName: '.*:INPUT_MERGE:SAMTOOLS_MERGE' {
            ext.args   = '--write-index'
        }
    }

    withName: '.*:INPUT_FILTER_SPLIT:SAMTOOLS_VIEW' {
        ext.args   = '--output-fmt cram --write-index -F 0x900'
        ext.prefix = { "${meta.id}_filtered" }
    }

    withName: '.*:DEEPVARIANT_CALLER:DEEPVARIANT' {
        ext.args = '--model_type=PACBIO'
    }

    withName: '.*:DEEPVARIANT_CALLER:BCFTOOLS_CONCAT_VCF' {
        ext.prefix = { "${meta.id}_deepvariant" }
    }

    withName: '.*:DEEPVARIANT_CALLER:BCFTOOLS_CONCAT_GVCF' {
        ext.prefix = { "${meta.id}_deepvariant.g" }
    }

    withName: 'BGZIP' {
        ext.prefix = { "${input.baseName}" }
        publishDir = [
            path: { "${params.outdir}/variant_calling" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'TABIX_CSI' {
        ext.args = "--preset vcf --csi"
        publishDir = [
            path: { "${params.outdir}/variant_calling" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'TABIX_TBI' {
        ext.args = "--preset vcf"
        publishDir = [
            path: { "${params.outdir}/variant_calling" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCF_STATS_REPORT' {
        ext.prefix = { "${meta.id}_vcf.stats" }
        publishDir = [
            path: { "${params.outdir}/variant_calling/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GVCF_STATS_REPORT' {
        ext.prefix = { "${meta.id}_gvcf.stats" }
        publishDir = [
            path: { "${params.outdir}/variant_calling/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PROCESS_VCF:VCFTOOLS_SITE_PI' {
        ext.args = '--site-pi'
        if( params.include_positions ){
            ext.args += ' --positions'
        } else if ( params.exclude_positions ){
            ext.args += ' --exclude-positions'
        }
        publishDir = [
            path: { "${params.outdir}/variant_calling" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PROCESS_VCF:VCFTOOLS_HET' {
        ext.args = '--het'
        publishDir = [
            path: { "${params.outdir}/variant_calling" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info/variantcalling" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
